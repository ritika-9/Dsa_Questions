//optimal solution
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length()==0) return 0;
        int l=0;
        int n=s.length();
        int max=Integer.MIN_VALUE;
        Set <Character> set=new HashSet<>();
        for(int r=0;r<n;r++){
            if(set.contains(s.charAt(r))){
                while(l<r&&set.contains(s.charAt(r))){
                    set.remove(s.charAt(l));
                    l++;
                }
            }
            set.add(s.charAt(r));
            max=Math.max(max,r-l+1);
        }
        return max;


    }
}

//brute force solution
import java.util.*;
public class Main{
    static int solve(String str) {
        if (str.length() == 0)
            return 0;
        int maxans = Integer.MIN_VALUE;

        for (int i = 0; i < str.length(); i++) {
            Set<Character> se = new HashSet<>();

            for (int j = i; j < str.length(); j++) {
                if (se.contains(str.charAt(j))) {
                    maxans = Math.max(maxans, j - i);
                    break;
                }
                se.add(str.charAt(j));
            }

            // Handle case when we reach end of string without a duplicate
            maxans = Math.max(maxans, str.length() - i);
        }

        return maxans;
        
    }

}

